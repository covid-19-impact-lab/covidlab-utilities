How to Add a Component
======================

Structure of the dashboard
--------------------------

The current dashboard layout is made of separate, thematically independent bokeh
Tabs. Each Tab can display one or multiple Bokeh figures plus descriptive
text, and each Tab is generated by dictionaries of data. These dictionaries, which
as an example may include summary statistics and multilingual labels, are in turn
generated by "source" data: Original versions of the LISS datasets, .csv files
mapping LISS variables' names to labels, etc.

To run the dashboard, the two main scripts are `process_dashboard_source_data.py`
and `run_dashboard.py`:
  - `process_dashboard_source_data.py` prepares the source data and outputs the
    resulting dictionaries of data to a directory you specify. Note that the current
    version of the dashboard uses data from different source datasets, which result
    in different dictionaries.
  - `run_dashboard.py` will then use those dictionaries as inputs to generate Tabs
    and assemble these Tabs to create the dashboard.

To add a new Tab (output) to the dashboard you need to integrate a new component
(input) in the existing code. A component  is a collection of modules containing
the code that creates the Tab itself.

Intro
-----

The two overarching rules to integrate a new component are:

  1. Make sure that your changes do not affect the already existing dashboard's
     components,
  2. Try to make your component as independent as possible.

Broadly speaking, you need to do three things:

- Include your component's code,
- **Update the data-processing step**, such that `process_dashboard_source_data.py`
    additionally returns the dictionary you need to generate your component,
- **Update the dashboard-building step**, such that your component is mapped to
    a Tab and displayed together with the already existing Tabs.

The two sections below contain more specific information on these steps.

Including your code
-------------------

The first step is adding a folder with the PY files that generate your component
in `utilities/dashboard/components`. To ensure that integrating the new component
is smooth, your code should be divided into three modules:

- Plotting module (e.g. `lineplot.py` or `mapplot.py`), containing the component's
  core functions. In particular, the plotting module contains:
    1. **Data-processing functions**, that returns the statistics to be displayed
       in the plot. E.g., `prepare_data` in `components/run_charts/lineplot.py`,
       and `prepare_maps_data` in `components/maps/mapplot.py`.
    2. **Plot-generating functions**, that generate the bokeh figure(s) to be
       displayed in the dashboard Tab. E.g., `setup_plot` and `update_plot` in
       `components/run_charts/lineplot.py`, and `setup_map` in
       `components/maps/mapplot.py`.
  It is convenient to develop the plotting module first and independently from
  the dashboard, for instance in a Jupyter notebook.

- `create_data.py`, containing functions that process the source data needed to
   create your component and returns a dictionary of aggregate data. The source
   data may include metadata, such as descriptive text.
   `create_data.py` imports the data-processing functions from the plotting module.

- `create_component.py`, containing functions that generate the bokeh Tab, and
  possibly add callbacks to make the Tab interactive.
  `create_component.py` imports the plot-generating functions from the plotting
  module.

Data-processing
---------------

To update the data-processing step, you may need to modify functions in three
modules: `process_dashboard_source_data.py`, `create_dashboard_data.py` and
`shared.py`.

The source files to process can be:

  - A **source dataset**, for instance a version of the LISS data. It needs to be in a
    folder whose path contains the name of the dataset, for instance "liss".
  - **Metadata**, which may be  datasets containing additional information on the
    variables your component uses, for example a mapping between variables' names
    and "nice names" to display, or descriptive text.

Changes in `process_dashboard_source_data.py`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This is the top module. To add a new component you need to:

  - Specify the path to the source dataset to be processed, and add its name to the
    `dataDict` dictionary. Each dataset used for the dashboard needs to have
    a unique name, which will identify the associated dictionary of aggregated data.
  - Specify the path(s) to metadata files that should be loaded
    together with the source dataset.
  - Specify a dictionary of arguments to be passed to `create_dashboard_data`.
    The arguments will depend on the files to process, as explained in the
    function docstring. You can add new arguments to the function if necessary.

Changes in `create_dashboard_data.py`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The function `create_dashboard_data` in `create_dashboard_data.py` returns a
dictionary of aggregate data which will contain **data specific to each component**
and **data shared across components**, for example menu labels or variables'
"nice names".

The former are generated via the component-specific functions in
`create_data.py`, while the latter are generated via functions in `shared.py`.

The distinction between the two is somewhat artificial, as data which are
currently not shared across components may become shared when a new one is added.

To add a new component you need to:

  - Add new arguments, if necessary.
  - Include the functions in `create_data.py`, so that the data specific
    to your component are added to the dictionary of aggregated data.

Changes in `shared.py`
~~~~~~~~~~~~~~~~~~~~~~

The functions in `shared.py` create data shared across components. In particular,
`create_general_variable_mappings` generates a dictionary that allows to look up
variables' metadata.

To add a new component you need to:

  - Add new arguments, if necessary.
  - Add new items to the dictionary, if necessary.

Dashboard-building
------------------
This step creates the dashboard. You will only need to modify the function
`assemble_dashboard_components` in `app/main.py`, integrating both the function
that create the new Tab and the newly created data.

As an example, consider the Labor Supply Tab in  the Dashboard, whose component
is in the `run_charts` folder:
- This Tab's source data are a version of the LISS dataset and a .csv file called
  `run_charts_description.csv`, in `utilities/dashboard/liss`.
  These source data are converted into a dictionary named `dashboard_data_waves.pickle`
  by `process_dashboard_source_data.py`.
- The Tab itself is created by the function `create_run_charts` in
  `utilities/dashboard/components/run_charts`.
Note that `Ã ssemble_dashboard_components` takes the dictionary as an argument
and calls `create_run_charts` to create `run_chart_page` (line 59-61). Then, it
creates the overall dashboard by assembling the Tabs together (line 73-80).
